{
	"info": {
		"_postman_id": "b7eb1fdd-94ae-4a16-b8e8-29ad95aa4fd9",
		"name": "Application-manager",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25495880"
	},
	"item": [
		{
			"name": "Autorization",
			"item": [
				{
					"name": "autirization",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"Thor\",\r\n    \"password\": \"123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJPZGluIiwiaWF0IjoxNzEwMDY3OTYyLCJpc3MiOiJhcHBsaWNhdGlvbi1tYW5hZ2VyIiwiZXhwIjoxNzEwMDcxNTYyfQ.aB840-8UJelUS6UbgTWPX8CE-fd5r31zVftny6WEAWs",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"Odin\",\r\n    \"password\": \"123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/logout",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin Users",
			"item": [
				{
					"name": "Get users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJUaG9yIiwiaWF0IjoxNzA5ODE2MTIxLCJpc3MiOiJhcHBsaWNhdGlvbi1tYW5hZ2VyIiwiZXhwIjoxNzA5ODE5NzIxfQ.Tm6qdrZs-a-JPj28dbJBTIYvNxsAC0zksGVkVaiWrCg",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/person",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"person"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Update Users Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/person?ids=3&ids=4&ids=5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"person"
							],
							"query": [
								{
									"key": "ids",
									"value": "3"
								},
								{
									"key": "ids",
									"value": "4"
								},
								{
									"key": "ids",
									"value": "5"
								}
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "User Applications",
			"item": [
				{
					"name": "Create Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJPZGluIiwiaWF0IjoxNzEyMDg2ODcyLCJpc3MiOiJhcHBsaWNhdGlvbi1tYW5hZ2VyIiwiZXhwIjoxNzEyMDkwNDcyfQ.kdNJl2qDVHx54Wk4z1Uio5owfb9iKfsif6b9NIBYbk4",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Applications\",\n    \"description\": \"new application for\",\n    \"phoneNumber\": \"89261234567\",\n    \"status\": \"DRAFT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/applications/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"applications",
								"users"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Update Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"name\": \"Applications\",\r\n    \"description\": \"new application for update\",\r\n    \"phoneNumber\": \"89261234567\",\r\n    \"status\": \"SENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/applications//users/:userId/update/:applicationId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"applications",
								"",
								"users",
								":userId",
								"update",
								":applicationId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "applicationId",
									"value": "1"
								}
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Get User Applications DESC",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJUaG9yIiwiaWF0IjoxNzEyMDg2NjI0LCJpc3MiOiJhcHBsaWNhdGlvbi1tYW5hZ2VyIiwiZXhwIjoxNzEyMDkwMjI0fQ.8RZCuP1ePauxVHQ5GOpUvbPlDI8YVdt2Rlauh5AMzkA",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/applications/users?sort=DESC",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"applications",
								"users"
							],
							"query": [
								{
									"key": "sort",
									"value": "DESC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Applications ASC",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJPZGluIiwiaWF0IjoxNzEyMDg2MzI1LCJpc3MiOiJhcHBsaWNhdGlvbi1tYW5hZ2VyIiwiZXhwIjoxNzEyMDg5OTI1fQ.i-mx0CFtdNV8RTfey5lhnGUeR5ypLJGQNIHvdKysBjM",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/applications/users?sort=ASC",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"applications",
								"users"
							],
							"query": [
								{
									"key": "sort",
									"value": "ASC"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Operator Application",
			"item": [
				{
					"name": "Get All Sent Application By UserName DESC",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Get All Sent Application By UserName ASC",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/applications/operator?name=Thor&sort=ASC",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"applications",
								"operator"
							],
							"query": [
								{
									"key": "name",
									"value": "Thor"
								},
								{
									"key": "sort",
									"value": "ASC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Sent Application  ASC",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Get All Sent Application DESC",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Apdate Statu Application By Operator",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{ \"updateApplicationDtoList\" : [\r\n    {\r\n        \"applicationId\": 1,\r\n        \"status\": \"ACCEPTED\"\r\n    },\r\n  {\r\n        \"applicationId\": 2,\r\n        \"status\": \"ACCEPTED\"\r\n    },\r\n    {\r\n        \"applicationId\": 3,\r\n        \"status\": \"ACCEPTED\"\r\n    }\r\n]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/applications/operator/update",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"applications",
								"operator",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application By Id",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin Application",
			"item": [
				{
					"name": "Get All Sent Application By UserName DESC by Admin",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/applications/admin?name=Thor&status=SENT&status=ACCEPTED&status=REJECTED&sort=DESC",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"applications",
								"admin"
							],
							"query": [
								{
									"key": "name",
									"value": "Thor"
								},
								{
									"key": "status",
									"value": "SENT"
								},
								{
									"key": "status",
									"value": "ACCEPTED"
								},
								{
									"key": "status",
									"value": "REJECTED"
								},
								{
									"key": "sort",
									"value": "DESC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Sent Application  DESC By Admin",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}